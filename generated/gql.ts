/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "\nquery Global {\n  global {\n    gaId\n    siteName\n    siteDescription\n    defaultSeo {\n      id\n      metaTitle\n      metaDescription\n      shareImage {\n        url\n        previewUrl\n        name\n      }\n      priority\n      changefreq\n    }\n  }\n}\n": typeof types.GlobalDocument,
    "\n  query Service($documentId: ID!, $status: PublicationStatus) {\n    service(documentId: $documentId, status: $status) {\n      documentId\n      name\n      slug\n      createdAt\n      updatedAt\n      publishedAt\n    }\n  }\n": typeof types.ServiceDocument,
    "\nquery Services($filters: ServiceFiltersInput, $pagination: PaginationArg, $sort: [String]) {\n  services(filters: $filters, pagination: $pagination, sort: $sort) {\n    documentId\n    name\n    slug\n    createdAt\n    updatedAt\n    publishedAt\n    lawyers {\n      documentId\n      slug\n      surname\n      photo {\n        url\n        previewUrl\n        name\n        documentId\n        caption\n        alternativeText\n      }\n      order\n      first_name\n      last_name\n    }\n  }\n}\n": typeof types.ServicesDocument,
    "\nquery Lawyers($filters: LawyerFiltersInput, $pagination: PaginationArg) {\n  lawyers(filters: $filters, pagination: $pagination) {\n    documentId\n    first_name\n    last_name\n    surname\n    slug\n    phone_number\n    email\n    address\n    photo {\n      url\n      previewUrl\n      name\n      caption\n    }\n    telegram\n    viber\n    whatsapp\n    facebook\n    order\n    seo {\n      id\n      metaTitle\n      metaDescription\n      shareImage {\n        url\n        previewUrl\n      }\n      priority\n      changefreq\n    }\n    city {\n      name\n      slug\n    }\n    instagram\n    regions {\n      documentId\n      name\n      slug\n      createdAt\n      updatedAt\n      publishedAt\n    }\n    services {\n      documentId\n      name\n      slug\n      createdAt\n      updatedAt\n      publishedAt\n    }\n    createdAt\n    updatedAt\n    publishedAt\n  }\n}\n": typeof types.LawyersDocument,
    "\nquery Regions($filters: RegionFiltersInput, $pagination: PaginationArg) {\n  regions(filters: $filters, pagination: $pagination) {\n    documentId\n    name\n    slug\n    lawyers {\n      first_name\n      last_name\n      slug\n      surname\n      documentId\n      city {\n        name\n        slug\n        documentId\n      }\n      instagram\n      email\n      facebook\n      order\n      phone_number\n      photo {\n        url\n        previewUrl\n        name\n      }\n      telegram\n      viber\n      whatsapp\n      seo {\n        changefreq\n        metaDescription\n        metaTitle\n        priority\n        shareImage {\n          url\n          previewUrl\n          name\n          alternativeText\n          caption\n        }\n      }\n    }\n    regions {\n      name\n      slug\n      is_parent\n      documentId\n      lawyers {\n        documentId\n        first_name\n        last_name\n        surname\n        slug\n        phone_number\n        email\n        address\n        photo {\n          url\n          previewUrl\n          name\n          caption\n          alternativeText\n        }\n        telegram\n        viber\n        whatsapp\n        facebook\n        order\n        seo {\n           changefreq\n        metaDescription\n        metaTitle\n        priority\n        shareImage {\n          url\n          previewUrl\n          name\n          alternativeText\n          caption\n        }\n        }\n        instagram\n        regions {\n          name\n          slug\n        }\n        services {\n          name\n          slug\n        }\n        city {\n          name\n          slug\n        }\n        createdAt\n        updatedAt\n        publishedAt\n      }\n    }\n  }\n}\n": typeof types.RegionsDocument,
    "\nquery Pages($pagination: PaginationArg) {\n  pages(pagination: $pagination) {\n    documentId\n    title\n    seo {\n      id\n      metaTitle\n      metaDescription\n      shareImage {\n        url\n        previewUrl\n        name\n        documentId\n        caption\n        alternativeText\n      }\n      priority\n      changefreq\n    }\n    slug\n    content\n    createdAt\n    updatedAt\n    publishedAt\n  }\n}": typeof types.PagesDocument,
    "\nquery Policy {\n  policy {\n    documentId\n    title\n    slug\n    seo {\n      id\n      metaTitle\n      metaDescription\n      shareImage {\n        url\n        previewUrl\n        name\n        alternativeText\n        caption\n        documentId\n      }\n      priority\n      changefreq\n    }\n    content\n    createdAt\n    updatedAt\n    publishedAt\n  }\n}\n": typeof types.PolicyDocument,
};
const documents: Documents = {
    "\nquery Global {\n  global {\n    gaId\n    siteName\n    siteDescription\n    defaultSeo {\n      id\n      metaTitle\n      metaDescription\n      shareImage {\n        url\n        previewUrl\n        name\n      }\n      priority\n      changefreq\n    }\n  }\n}\n": types.GlobalDocument,
    "\n  query Service($documentId: ID!, $status: PublicationStatus) {\n    service(documentId: $documentId, status: $status) {\n      documentId\n      name\n      slug\n      createdAt\n      updatedAt\n      publishedAt\n    }\n  }\n": types.ServiceDocument,
    "\nquery Services($filters: ServiceFiltersInput, $pagination: PaginationArg, $sort: [String]) {\n  services(filters: $filters, pagination: $pagination, sort: $sort) {\n    documentId\n    name\n    slug\n    createdAt\n    updatedAt\n    publishedAt\n    lawyers {\n      documentId\n      slug\n      surname\n      photo {\n        url\n        previewUrl\n        name\n        documentId\n        caption\n        alternativeText\n      }\n      order\n      first_name\n      last_name\n    }\n  }\n}\n": types.ServicesDocument,
    "\nquery Lawyers($filters: LawyerFiltersInput, $pagination: PaginationArg) {\n  lawyers(filters: $filters, pagination: $pagination) {\n    documentId\n    first_name\n    last_name\n    surname\n    slug\n    phone_number\n    email\n    address\n    photo {\n      url\n      previewUrl\n      name\n      caption\n    }\n    telegram\n    viber\n    whatsapp\n    facebook\n    order\n    seo {\n      id\n      metaTitle\n      metaDescription\n      shareImage {\n        url\n        previewUrl\n      }\n      priority\n      changefreq\n    }\n    city {\n      name\n      slug\n    }\n    instagram\n    regions {\n      documentId\n      name\n      slug\n      createdAt\n      updatedAt\n      publishedAt\n    }\n    services {\n      documentId\n      name\n      slug\n      createdAt\n      updatedAt\n      publishedAt\n    }\n    createdAt\n    updatedAt\n    publishedAt\n  }\n}\n": types.LawyersDocument,
    "\nquery Regions($filters: RegionFiltersInput, $pagination: PaginationArg) {\n  regions(filters: $filters, pagination: $pagination) {\n    documentId\n    name\n    slug\n    lawyers {\n      first_name\n      last_name\n      slug\n      surname\n      documentId\n      city {\n        name\n        slug\n        documentId\n      }\n      instagram\n      email\n      facebook\n      order\n      phone_number\n      photo {\n        url\n        previewUrl\n        name\n      }\n      telegram\n      viber\n      whatsapp\n      seo {\n        changefreq\n        metaDescription\n        metaTitle\n        priority\n        shareImage {\n          url\n          previewUrl\n          name\n          alternativeText\n          caption\n        }\n      }\n    }\n    regions {\n      name\n      slug\n      is_parent\n      documentId\n      lawyers {\n        documentId\n        first_name\n        last_name\n        surname\n        slug\n        phone_number\n        email\n        address\n        photo {\n          url\n          previewUrl\n          name\n          caption\n          alternativeText\n        }\n        telegram\n        viber\n        whatsapp\n        facebook\n        order\n        seo {\n           changefreq\n        metaDescription\n        metaTitle\n        priority\n        shareImage {\n          url\n          previewUrl\n          name\n          alternativeText\n          caption\n        }\n        }\n        instagram\n        regions {\n          name\n          slug\n        }\n        services {\n          name\n          slug\n        }\n        city {\n          name\n          slug\n        }\n        createdAt\n        updatedAt\n        publishedAt\n      }\n    }\n  }\n}\n": types.RegionsDocument,
    "\nquery Pages($pagination: PaginationArg) {\n  pages(pagination: $pagination) {\n    documentId\n    title\n    seo {\n      id\n      metaTitle\n      metaDescription\n      shareImage {\n        url\n        previewUrl\n        name\n        documentId\n        caption\n        alternativeText\n      }\n      priority\n      changefreq\n    }\n    slug\n    content\n    createdAt\n    updatedAt\n    publishedAt\n  }\n}": types.PagesDocument,
    "\nquery Policy {\n  policy {\n    documentId\n    title\n    slug\n    seo {\n      id\n      metaTitle\n      metaDescription\n      shareImage {\n        url\n        previewUrl\n        name\n        alternativeText\n        caption\n        documentId\n      }\n      priority\n      changefreq\n    }\n    content\n    createdAt\n    updatedAt\n    publishedAt\n  }\n}\n": types.PolicyDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery Global {\n  global {\n    gaId\n    siteName\n    siteDescription\n    defaultSeo {\n      id\n      metaTitle\n      metaDescription\n      shareImage {\n        url\n        previewUrl\n        name\n      }\n      priority\n      changefreq\n    }\n  }\n}\n"): (typeof documents)["\nquery Global {\n  global {\n    gaId\n    siteName\n    siteDescription\n    defaultSeo {\n      id\n      metaTitle\n      metaDescription\n      shareImage {\n        url\n        previewUrl\n        name\n      }\n      priority\n      changefreq\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Service($documentId: ID!, $status: PublicationStatus) {\n    service(documentId: $documentId, status: $status) {\n      documentId\n      name\n      slug\n      createdAt\n      updatedAt\n      publishedAt\n    }\n  }\n"): (typeof documents)["\n  query Service($documentId: ID!, $status: PublicationStatus) {\n    service(documentId: $documentId, status: $status) {\n      documentId\n      name\n      slug\n      createdAt\n      updatedAt\n      publishedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery Services($filters: ServiceFiltersInput, $pagination: PaginationArg, $sort: [String]) {\n  services(filters: $filters, pagination: $pagination, sort: $sort) {\n    documentId\n    name\n    slug\n    createdAt\n    updatedAt\n    publishedAt\n    lawyers {\n      documentId\n      slug\n      surname\n      photo {\n        url\n        previewUrl\n        name\n        documentId\n        caption\n        alternativeText\n      }\n      order\n      first_name\n      last_name\n    }\n  }\n}\n"): (typeof documents)["\nquery Services($filters: ServiceFiltersInput, $pagination: PaginationArg, $sort: [String]) {\n  services(filters: $filters, pagination: $pagination, sort: $sort) {\n    documentId\n    name\n    slug\n    createdAt\n    updatedAt\n    publishedAt\n    lawyers {\n      documentId\n      slug\n      surname\n      photo {\n        url\n        previewUrl\n        name\n        documentId\n        caption\n        alternativeText\n      }\n      order\n      first_name\n      last_name\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery Lawyers($filters: LawyerFiltersInput, $pagination: PaginationArg) {\n  lawyers(filters: $filters, pagination: $pagination) {\n    documentId\n    first_name\n    last_name\n    surname\n    slug\n    phone_number\n    email\n    address\n    photo {\n      url\n      previewUrl\n      name\n      caption\n    }\n    telegram\n    viber\n    whatsapp\n    facebook\n    order\n    seo {\n      id\n      metaTitle\n      metaDescription\n      shareImage {\n        url\n        previewUrl\n      }\n      priority\n      changefreq\n    }\n    city {\n      name\n      slug\n    }\n    instagram\n    regions {\n      documentId\n      name\n      slug\n      createdAt\n      updatedAt\n      publishedAt\n    }\n    services {\n      documentId\n      name\n      slug\n      createdAt\n      updatedAt\n      publishedAt\n    }\n    createdAt\n    updatedAt\n    publishedAt\n  }\n}\n"): (typeof documents)["\nquery Lawyers($filters: LawyerFiltersInput, $pagination: PaginationArg) {\n  lawyers(filters: $filters, pagination: $pagination) {\n    documentId\n    first_name\n    last_name\n    surname\n    slug\n    phone_number\n    email\n    address\n    photo {\n      url\n      previewUrl\n      name\n      caption\n    }\n    telegram\n    viber\n    whatsapp\n    facebook\n    order\n    seo {\n      id\n      metaTitle\n      metaDescription\n      shareImage {\n        url\n        previewUrl\n      }\n      priority\n      changefreq\n    }\n    city {\n      name\n      slug\n    }\n    instagram\n    regions {\n      documentId\n      name\n      slug\n      createdAt\n      updatedAt\n      publishedAt\n    }\n    services {\n      documentId\n      name\n      slug\n      createdAt\n      updatedAt\n      publishedAt\n    }\n    createdAt\n    updatedAt\n    publishedAt\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery Regions($filters: RegionFiltersInput, $pagination: PaginationArg) {\n  regions(filters: $filters, pagination: $pagination) {\n    documentId\n    name\n    slug\n    lawyers {\n      first_name\n      last_name\n      slug\n      surname\n      documentId\n      city {\n        name\n        slug\n        documentId\n      }\n      instagram\n      email\n      facebook\n      order\n      phone_number\n      photo {\n        url\n        previewUrl\n        name\n      }\n      telegram\n      viber\n      whatsapp\n      seo {\n        changefreq\n        metaDescription\n        metaTitle\n        priority\n        shareImage {\n          url\n          previewUrl\n          name\n          alternativeText\n          caption\n        }\n      }\n    }\n    regions {\n      name\n      slug\n      is_parent\n      documentId\n      lawyers {\n        documentId\n        first_name\n        last_name\n        surname\n        slug\n        phone_number\n        email\n        address\n        photo {\n          url\n          previewUrl\n          name\n          caption\n          alternativeText\n        }\n        telegram\n        viber\n        whatsapp\n        facebook\n        order\n        seo {\n           changefreq\n        metaDescription\n        metaTitle\n        priority\n        shareImage {\n          url\n          previewUrl\n          name\n          alternativeText\n          caption\n        }\n        }\n        instagram\n        regions {\n          name\n          slug\n        }\n        services {\n          name\n          slug\n        }\n        city {\n          name\n          slug\n        }\n        createdAt\n        updatedAt\n        publishedAt\n      }\n    }\n  }\n}\n"): (typeof documents)["\nquery Regions($filters: RegionFiltersInput, $pagination: PaginationArg) {\n  regions(filters: $filters, pagination: $pagination) {\n    documentId\n    name\n    slug\n    lawyers {\n      first_name\n      last_name\n      slug\n      surname\n      documentId\n      city {\n        name\n        slug\n        documentId\n      }\n      instagram\n      email\n      facebook\n      order\n      phone_number\n      photo {\n        url\n        previewUrl\n        name\n      }\n      telegram\n      viber\n      whatsapp\n      seo {\n        changefreq\n        metaDescription\n        metaTitle\n        priority\n        shareImage {\n          url\n          previewUrl\n          name\n          alternativeText\n          caption\n        }\n      }\n    }\n    regions {\n      name\n      slug\n      is_parent\n      documentId\n      lawyers {\n        documentId\n        first_name\n        last_name\n        surname\n        slug\n        phone_number\n        email\n        address\n        photo {\n          url\n          previewUrl\n          name\n          caption\n          alternativeText\n        }\n        telegram\n        viber\n        whatsapp\n        facebook\n        order\n        seo {\n           changefreq\n        metaDescription\n        metaTitle\n        priority\n        shareImage {\n          url\n          previewUrl\n          name\n          alternativeText\n          caption\n        }\n        }\n        instagram\n        regions {\n          name\n          slug\n        }\n        services {\n          name\n          slug\n        }\n        city {\n          name\n          slug\n        }\n        createdAt\n        updatedAt\n        publishedAt\n      }\n    }\n  }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery Pages($pagination: PaginationArg) {\n  pages(pagination: $pagination) {\n    documentId\n    title\n    seo {\n      id\n      metaTitle\n      metaDescription\n      shareImage {\n        url\n        previewUrl\n        name\n        documentId\n        caption\n        alternativeText\n      }\n      priority\n      changefreq\n    }\n    slug\n    content\n    createdAt\n    updatedAt\n    publishedAt\n  }\n}"): (typeof documents)["\nquery Pages($pagination: PaginationArg) {\n  pages(pagination: $pagination) {\n    documentId\n    title\n    seo {\n      id\n      metaTitle\n      metaDescription\n      shareImage {\n        url\n        previewUrl\n        name\n        documentId\n        caption\n        alternativeText\n      }\n      priority\n      changefreq\n    }\n    slug\n    content\n    createdAt\n    updatedAt\n    publishedAt\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery Policy {\n  policy {\n    documentId\n    title\n    slug\n    seo {\n      id\n      metaTitle\n      metaDescription\n      shareImage {\n        url\n        previewUrl\n        name\n        alternativeText\n        caption\n        documentId\n      }\n      priority\n      changefreq\n    }\n    content\n    createdAt\n    updatedAt\n    publishedAt\n  }\n}\n"): (typeof documents)["\nquery Policy {\n  policy {\n    documentId\n    title\n    slug\n    seo {\n      id\n      metaTitle\n      metaDescription\n      shareImage {\n        url\n        previewUrl\n        name\n        alternativeText\n        caption\n        documentId\n      }\n      priority\n      changefreq\n    }\n    content\n    createdAt\n    updatedAt\n    publishedAt\n  }\n}\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;